<!-- -->
<launch>
    <!-- Launches the AR.Drone driver -->
	<node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" clear_params="true">
	    <!--args="-ip 192.168.1.13">-->

	    <param name="outdoor" value="0" /> <!-- If we are flying outdoors, will select more aggressive default settings -->
	    <param name="flight_without_shell" value="0" /> <!-- Changes internal controller gains if we are flying without the propeller guard -->
	    <param name="altitude_max" value="3000" /> <!-- in millimeters = 3 meters = 9' -->
            <param name="altitude_min" value="50" /> <!-- in millimeters = 5cm = 2" -->
            <param name="euler_angle_max" value="0.1" /> <!-- maximum allowable body angle in radians = 5 degrees -->
            <param name="control_vz_max" value="1050" /> <!-- maximum z velocity in mm/sec = 0.2m/sec -->
	    <param name="control_yaw" value="0.7" /> <!-- maximum rotation rate in radians/sec = 40 degrees per second (1/9 rev/sec) -->
	    <param name="video_codec" value="129" />
	    <!--<param name="codec_fps" value="25" />-->
	    <param name="detect_type" value="10" />
	    <param name="navdata_demo" value="1" />
	    <param name="detections_select_h" value="32" />  <!-- In the horizontal camera, look for the orange-blue-orange markers -->
	    <param name="detections_select_v_hsync" value="128" />  <!-- In the vertical camera, detect the A4 marker -->
	    <param name="enemy_colors" value="1" />  <!-- Orange-Blue-Orange = 3 -->
	    <param name="enemy_without_shell" value="0" />  <!-- Detect the indoor stickers, rather than the outdoor hull -->
	</node>	
	
	<!-- Launches the keyboard controller -->
	<node name="keyboard_controller" pkg="drone_gestures_demo" type="keyboard_controller.py" required="true" output = "screen" >
		 <remap from="gestures" to="/drone_gestures" />
		 <remap from="/ardrone/out_info" to="/ardrone/drone_1_info" />
		 <remap from="/ardrone/info_in_1" to="/ardrone/drone_2_info" />
		 <remap from="/ardrone/info_in_2" to="/ardrone/drone_3_info" />
		 <remap from="/ardrone/info_in_3" to="/ardrone/drone_4_info" />
		 <param name="enable_keyboard_gestures" value="1" />
		 <param name="id" value="1" />
	</node>
	
	<node name="feedback_sound" pkg = "drone_gestures_demo" type = "sounds.py" required = "true" output="screen"/>
	
	<!-- <node name="printer2" pkg = "ardrone_swarm" type = "printer2.py" required = "false" /> -->
	
	<node name="state_estimation_1" pkg = "drone_gestures_demo" type = "state_estimation.py" required = "true" />
	
	<node name="soundplay_node" pkg="sound_play" type="soundplay_node.py" required = "true" />
    
   	<!-- <node name="ardrone_led_1" pkg="ardrone_swarm" type="ardrone_led_node" output="screen">
		<param name="relay" type="int" value="1"/>
		<param name="topic" type="string" value="/drone1/led"/>
		<param name="lightRelay" type="int" value="2"/>
		<param name="modeRelay" type="int" value="3"/>
	</node>
	<node name="ardrone_led_2" pkg="ardrone_swarm" type="ardrone_led_node" output="screen">
		<param name="relay" type="int" value="4"/>
		<param name="topic" type="string" value="/drone2/led"/>
	</node>-->
	
	<arg name="marker_size" default="13.0" />/ar_pose_marker_individual
	<arg name="max_new_marker_error" default="0.04" />
	<arg name="max_track_error" default="0.2" />
	<arg name="cam_image_topic" default="/ardrone/image_raw" />
	<arg name="cam_info_topic" default="/ardrone/camera_info" />	
	<arg name="output_frame" default="/ardrone_base_frontcam" />
	<arg name="bundle_files" default="$(find drone_gestures_demo)/bundles/box_3.xml $(find ardrone_swarm)/bundles/hat.xml" />

	<!-- <node name="ar_track_alvar_bundle" pkg="ar_track_alvar" type="findMarkerBundlesNoKinect" respawn="true" output="screen" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame) $(arg bundle_files)" >
		<remap from="/ar_pose_marker" to="/ar_pose_marker_bundle" />
	</node> -->
	
	<node name="ar_track_alvar_individual" pkg="ar_track_alvar_idsia" type="individualMarkersNoKinect" respawn="true" output="screen" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame)" >
	<remap from="/ar_pose_marker" to="/ar_pose_marker_individual" />
	</node>
	
	
	
</launch>

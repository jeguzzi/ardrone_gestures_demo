"""autogenerated by genpy from ardrone_swarm/Position.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Position(genpy.Message):
  _md5sum = "662c72f59da66b2b1739a5ac9ad9d276"
  _type = "ardrone_swarm/Position"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 alpha
float32 x
float32 y
float32 z
bool tag_located
float32 marker_displacement
int32 room_marker_tracked

"""
  __slots__ = ['alpha','x','y','z','tag_located','marker_displacement','room_marker_tracked']
  _slot_types = ['float32','float32','float32','float32','bool','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       alpha,x,y,z,tag_located,marker_displacement,room_marker_tracked

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.alpha is None:
        self.alpha = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.tag_located is None:
        self.tag_located = False
      if self.marker_displacement is None:
        self.marker_displacement = 0.
      if self.room_marker_tracked is None:
        self.room_marker_tracked = 0
    else:
      self.alpha = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.tag_located = False
      self.marker_displacement = 0.
      self.room_marker_tracked = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4fBfi.pack(_x.alpha, _x.x, _x.y, _x.z, _x.tag_located, _x.marker_displacement, _x.room_marker_tracked))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.alpha, _x.x, _x.y, _x.z, _x.tag_located, _x.marker_displacement, _x.room_marker_tracked,) = _struct_4fBfi.unpack(str[start:end])
      self.tag_located = bool(self.tag_located)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4fBfi.pack(_x.alpha, _x.x, _x.y, _x.z, _x.tag_located, _x.marker_displacement, _x.room_marker_tracked))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.alpha, _x.x, _x.y, _x.z, _x.tag_located, _x.marker_displacement, _x.room_marker_tracked,) = _struct_4fBfi.unpack(str[start:end])
      self.tag_located = bool(self.tag_located)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4fBfi = struct.Struct("<4fBfi")

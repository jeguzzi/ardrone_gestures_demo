"""autogenerated by genpy from ardrone_swarm/Drone_info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Drone_info(genpy.Message):
  _md5sum = "dc2b86907af6564790cdeb842667cf84"
  _type = "ardrone_swarm/Drone_info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 status
uint32 task
int32 command
float32 alpha
float32 x
float32 y
float32 z

float32 alpha_box
bool box_in_sight

float32 alpha_belt
bool belt_in_sight

"""
  __slots__ = ['status','task','command','alpha','x','y','z','alpha_box','box_in_sight','alpha_belt','belt_in_sight']
  _slot_types = ['int32','uint32','int32','float32','float32','float32','float32','float32','bool','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,task,command,alpha,x,y,z,alpha_box,box_in_sight,alpha_belt,belt_in_sight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Drone_info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.task is None:
        self.task = 0
      if self.command is None:
        self.command = 0
      if self.alpha is None:
        self.alpha = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.alpha_box is None:
        self.alpha_box = 0.
      if self.box_in_sight is None:
        self.box_in_sight = False
      if self.alpha_belt is None:
        self.alpha_belt = 0.
      if self.belt_in_sight is None:
        self.belt_in_sight = False
    else:
      self.status = 0
      self.task = 0
      self.command = 0
      self.alpha = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.alpha_box = 0.
      self.box_in_sight = False
      self.alpha_belt = 0.
      self.belt_in_sight = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_iIi5fBfB.pack(_x.status, _x.task, _x.command, _x.alpha, _x.x, _x.y, _x.z, _x.alpha_box, _x.box_in_sight, _x.alpha_belt, _x.belt_in_sight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.status, _x.task, _x.command, _x.alpha, _x.x, _x.y, _x.z, _x.alpha_box, _x.box_in_sight, _x.alpha_belt, _x.belt_in_sight,) = _struct_iIi5fBfB.unpack(str[start:end])
      self.box_in_sight = bool(self.box_in_sight)
      self.belt_in_sight = bool(self.belt_in_sight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_iIi5fBfB.pack(_x.status, _x.task, _x.command, _x.alpha, _x.x, _x.y, _x.z, _x.alpha_box, _x.box_in_sight, _x.alpha_belt, _x.belt_in_sight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.status, _x.task, _x.command, _x.alpha, _x.x, _x.y, _x.z, _x.alpha_box, _x.box_in_sight, _x.alpha_belt, _x.belt_in_sight,) = _struct_iIi5fBfB.unpack(str[start:end])
      self.box_in_sight = bool(self.box_in_sight)
      self.belt_in_sight = bool(self.belt_in_sight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_iIi5fBfB = struct.Struct("<iIi5fBfB")
